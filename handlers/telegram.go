// Tasks: Sending and receiving messages, functionality for interacting with the bot.
package handlers

import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/redis/go-redis/v9"
	"gopkg.in/telebot.v4"
)

type TelegramHandler struct {
	Bot      *telebot.Bot   // Telegram bot instance
	Neural   *NeuralHandler // NeuralHandler instance for working with neural network
	Logger   *log.Logger    // Logger for recording events
	Redis    *redis.Client  // Redis database for storing message intervals
	MsgDelay time.Duration
}

func NewTelegramhandler(bot *telebot.Bot, neural *NeuralHandler, logger *log.Logger, rdb *redis.Client) *TelegramHandler { // Constructor that initializes the Telegram handler
	go func() {
		for {
			if err := neural.cleanUpOldMessages(context.Background(), 24*time.Hour); err != nil {
				logger.Printf("cleanUp error: %v", err)
			}
			time.Sleep(1 * time.Minute)
		}
	}() // Automatic database cleaning when messages are stored for more than X hours specified in the cleanUpMessages function
	return &TelegramHandler{
		Bot:      bot,
		Neural:   neural,
		Logger:   logger,
		Redis:    rdb,
		MsgDelay: 1 * time.Minute,
	}
}

func (h *TelegramHandler) RegisterHandlers() { // Registers command and message handlers
	h.Bot.Handle("/start", h.HandleStart)
	h.Bot.Handle("/reset", h.HandleReset)
	h.Bot.Handle("/help", h.HandleHelp)
	h.Bot.Handle("/about", h.HandleAbout)
	h.Bot.Handle("/policy", h.HandlePolicy)

	h.Bot.Handle(telebot.OnText, h.HandleText)
}

// --- Handlers ---

func (h *TelegramHandler) HandleStart(c telebot.Context) error { // Start bot
	user := c.Sender()
	h.Logger.Printf("Start message: %d %s", user.ID, user.Username)
	return c.Send("<b>üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!</b> –Ø –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π DeepSeek AI (DeepSeek V3 0324)\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –∑–∞–ø—Ä–æ—Å, –∞ —è –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—á—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ :)\n\n‚ùó–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n\n<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n/policy - –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n/reset - –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n/help - –ü–æ–º–æ—â—å\n/about - –û –±–æ—Ç–µ", telebot.ModeHTML)
}

func (h *TelegramHandler) HandleReset(c telebot.Context) error { // Clearing history
	user := c.Sender()
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := h.Neural.ResetConversation(ctx, user.ID); err != nil {
		h.Logger.Printf("[ ERROR ] Reset error for user %d - %s: %v", user.ID, user.Username, err)
		return c.Send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞")
	}

	return c.Send("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞")
}

func (h *TelegramHandler) HandleHelp(c telebot.Context) error {
	user := c.Sender()
	h.Logger.Printf("Help message: %d %s", user.ID, user.Username)
	return c.Send("<b>‚ùì –ü–æ–º–æ—â—å:</b>\n<a href=\"https://github.com/wnderbin/QuokkaAI-Bot/tree/main/docs\">–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</a> - –∏–º–µ—é—Ç—Å—è —Ä—É—Å—Å–∫–∞—è –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∞—è –≤–µ—Ä—Å–∏–∏. –í –Ω–µ–π –∏–∑–ª–æ–∂–µ–Ω–∞ –≤—Å—è —Ä–∞–±–æ—Ç–∞ —Å –±–æ—Ç–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –≤–µ—Ä–æ—è—Ç–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã —Å–µ—Ä–≤–µ—Ä–∞. \n\n‚ùó –ù–æ –µ—Å–ª–∏ –≤—ã —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç–µ—Å—å —Å –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –æ—à–∏–±–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å —Å –ø—Ä–æ–±–ª–µ–º–æ–π –º–Ω–µ –≤ –ª–∏—á–∫—É - @wnderbin", telebot.ModeHTML)
}

func (h *TelegramHandler) HandleAbout(c telebot.Context) error {
	user := c.Sender()
	h.Logger.Printf("About message: %d %s", user.ID, user.Username)
	return c.Send("üöÄ <b>Quokka-Bot - –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π DeepSeekAPI.</b>\n\n<b>–í —ç—Ç–æ–º –±–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–∏–±–∫–∞—è –º–æ–¥–µ–ª—å DeepSeek V3 0324.</b>\n\n<b>–ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏:</b>\n<b>1.</b> –ì–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.\n<b>2.</b> –õ—É—á—à–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤.\n<b>3.</b> API —Å –Ω–∏–∑–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π - —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –º–æ–¥–µ–ª—å '–¥—É–º–∞–µ—Ç' –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –±—ã—Å—Ç—Ä–µ–µ.\n<b>4.</b> –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π \"hallucination\". (–º–µ–Ω—å—à–µ –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤)\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @wnderbin", telebot.ModeHTML)
}

func (h *TelegramHandler) HandlePolicy(c telebot.Context) error {
	user := c.Sender()
	h.Logger.Printf("Policy message: %d %s", user.ID, user.Username)
	return c.Send("<b>üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</b>\n\n–ó–∞—è–≤–ª–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º —É–∫–∞–∑–∞–Ω–æ, –∫–∞–∫ –±–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –æ –≤–∞—Å –¥–∞–Ω–Ω—ã–µ, –∫–∞–∫ –¥–æ–ª–≥–æ –∏ –≤ –∫–∞–∫–æ–º –≤–∏–¥–µ –æ–Ω –∏—Ö —Ö—Ä–∞–Ω–∏—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç.\n\n‚ùó<b>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞!</b>\n\n<a href=\"https://github.com/wnderbin/QuokkaAI-Bot/tree/main/privacy\">–°—Å—ã–ª–∫–∞</a>", telebot.ModeHTML)
}

func (h *TelegramHandler) HandleText(c telebot.Context) error {
	user := c.Sender()

	allowed, waitTime, err := h.checkRateLimit(user.ID)
	if err != nil {
		h.Logger.Printf("[ ERROR ] Redis error for user %d: %v", user.ID, err)
		// In case of a Redis error, we skip the check so as not to block users
		return h.processMessage(c)
	}

	if !allowed {
		h.Logger.Printf("Rate limit for user %d (wait %.1fs)", user.ID, waitTime.Seconds())
		return c.Send(fmt.Sprintf("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ %.0f —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", waitTime.Seconds()))
	}

	return h.processMessage(c)
}

// --- Additional funcs ---

func (h *TelegramHandler) processMessage(c telebot.Context) error {
	// Text message processing logic
	startTime := time.Now()
	user := c.Sender()
	text := c.Text()

	h.Logger.Printf("Message from %d %s: %.100s...", user.ID, user.Username, text)

	ctx, cancel := context.WithTimeout(context.Background(), 2*time.Minute)
	defer cancel()

	if err := c.Notify(telebot.Typing); err != nil {
		h.Logger.Printf("[ ERROR ] Failed to send typing action %d %s: %v", user.ID, user.Username, err)
	}

	response, err := h.Neural.HandleMessage(ctx, user.ID, text) // Neural network response to user
	if err != nil {
		h.Logger.Printf("[ ERROR ] Error from Neural for user %d: %v", user.ID, err)
		return c.Send("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	if response == "" { // Due to internal errors or other conditions, the neural network may send an empty response to the user
		h.Logger.Printf("[ ERROR ] Empty response from Neural for user %d", user.ID)
		return c.Send("ü§∑ –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–Ω–∞—á–µ.")
	}

	cleanText := strings.TrimSpace(response) // The maximum character limit for messages in Telegram is 4000. Cut off the neural network's response if it is too long.
	if len(cleanText) > 4000 {
		cleanText = cleanText[:4000]
	}

	if err := safeSend(c, cleanText); err != nil { // Secure messaging feature
		h.Logger.Printf("[ ERROR ] Failed to send message to %d: %v", user.ID, err)
		return c.Send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
	}

	h.Logger.Printf("Successfully responded to %d in %v", user.ID, time.Since(startTime))
	return nil
}

func (h *TelegramHandler) checkRateLimit(userID int64) (allowed bool, remaining time.Duration, err error) {
	ctx := context.Background()
	key := fmt.Sprintf("rate_limit:%d", userID) // Create a key to track each user's limit

	set, err := h.Redis.SetNX(ctx, key, "1", h.MsgDelay).Result() // Attempting to install key
	// SetNX - atomic operation "Set if Not eXists"
	// "1" - value (in this case it is not important, only the fact of the key presence is used)
	// h.MsgDelay - key lifetime
	if err != nil { // If there is an error, we allow the request, otherwise, if there is an error, the user will simply be blocked
		return true, 0, err
	}

	if set { // If the key was installed, the limit is not exceeded.
		return true, 0, nil
	}

	ttl, err := h.Redis.TTL(ctx, key).Result() // TTL - we get the remaining lifetime of the key
	// Positive value - how many seconds are left before the key is deleted
	if err != nil {
		return true, 0, err
	}

	if ttl < 0 {
		return true, 0, nil
	}

	return false, ttl, nil // We will only get here if the TTL is positive.
}

func (n *NeuralHandler) cleanUpOldMessages(ctx context.Context, olderThan time.Duration) error {
	interval := fmt.Sprintf("%d hours", int(olderThan.Hours()))
	_, err := n.DB.ExecContext(ctx, `
		DELETE FROM chat_messages WHERE created_at < NOW() - $1::interval
	`, interval) // Clear messages that are stored in the chat messages for more than <olderThan> time
	return err
}

func safeSend(c telebot.Context, text string) error { // safeSend sends a message with panic handling and retries
	defer func() {
		if r := recover(); r != nil {
			log.Printf("Recovered from panic while sending: %v", r)
		}
	}()

	// Try to send 3 times with a delay
	var lastErr error
	for i := range 3 {
		if err := c.Send(text); err == nil {
			return nil
		} else {
			lastErr = err
			time.Sleep(time.Second * time.Duration(i+1))
		}
	}
	return lastErr // If the error still remains, return the last one
}
